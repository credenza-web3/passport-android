package com.credenza3.credenzapassport.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class OzzieContract extends Contract {
//    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040805160208101909152600081526200002c816200003e565b50620000383362000057565b62000244565b80516200005390600290602084019062000161565b5050565b600454158015906200007957503360009081526003602052604090205460ff16155b15620000d65760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604482015261371760f11b606482015260840160405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff1615620000fb5750565b6001600160a01b03166000818152600360205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b8280546200016f9062000207565b90600052602060002090601f016020900481019282620001935760008555620001de565b82601f10620001ae57805160ff1916838001178555620001de565b82800160010185558215620001de579182015b82811115620001de578251825591602001919060010190620001c1565b50620001ec929150620001f0565b5090565b5b80821115620001ec5760008155600101620001f1565b600181811c908216806200021c57607f821691505b602082108114156200023e57634e487b7160e01b600052602260045260246000fd5b50919050565b61246d80620002546000396000f3fe6080604052600436106101b65760003560e01c806380dc439e116100ec578063d1eff8951161008a578063e1461f1211610064578063e1461f1214610533578063e985e9c514610560578063ec6be06e146105a9578063f242432a146105c957600080fd5b8063d1eff895146104d5578063d36223f1146104f3578063d879fb771461051357600080fd5b8063a22cb465116100c6578063a22cb46514610436578063adfadad314610456578063cf7c6de914610483578063d114c9dc146104b557600080fd5b806380dc439e146103e157806388d0f86a146103f4578063a0e67e2b1461041457600080fd5b80631abe7cb3116101595780634e1273f4116101335780634e1273f414610354578063578680be146103815780637065cb48146103a1578063782f08ae146103c157600080fd5b80631abe7cb3146102f45780632eb2c2d6146103145780632f54bf6e1461033457600080fd5b80630e89341c116101955780630e89341c14610265578063156e29f614610285578063173825d9146102a7578063177ed0f3146102c757600080fd5b8062fdd58e146101bb57806301ffc9a7146101ee5780630d8e6e2c1461021e575b600080fd5b3480156101c757600080fd5b506101db6101d6366004611ca2565b6105e9565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004611dea565b61067f565b60405190151581526020016101e5565b34801561022a57600080fd5b506040805180820190915260158152744f7a7a6965436f6e7472616374207620302e302e3160581b60208201525b6040516101e59190612097565b34801561027157600080fd5b50610258610280366004611e22565b6106d1565b34801561029157600080fd5b506102a56102a0366004611ccd565b610773565b005b3480156102b357600080fd5b506102a56102c2366004611acb565b6107c4565b3480156102d357600080fd5b506101db6102e2366004611e22565b60009081526007602052604090205490565b34801561030057600080fd5b506102a561030f366004611e88565b6109a0565b34801561032057600080fd5b506102a561032f366004611b1f565b6109d7565b34801561034057600080fd5b5061020e61034f366004611acb565b610a23565b34801561036057600080fd5b5061037461036f366004611d01565b610a41565b6040516101e59190612056565b34801561038d57600080fd5b506102a561039c366004611e88565b610ba3565b3480156103ad57600080fd5b506102a56103bc366004611acb565b610bda565b3480156103cd57600080fd5b506102a56103dc366004611e3a565b610c85565b6102a56103ef366004611ea9565b610cc9565b34801561040057600080fd5b506102a561040f366004611e88565b610d5a565b34801561042057600080fd5b50610429610d91565b6040516101e59190612009565b34801561044257600080fd5b506102a5610451366004611c75565b610df3565b34801561046257600080fd5b506101db610471366004611e22565b60009081526006602052604090205490565b34801561048f57600080fd5b506008546001600160a01b03165b6040516001600160a01b0390911681526020016101e5565b3480156104c157600080fd5b506102a56104d0366004611bc9565b610dfe565b3480156104e157600080fd5b506009546001600160a01b031661049d565b3480156104ff57600080fd5b506102a561050e366004611ea9565b610e51565b34801561051f57600080fd5b506102a561052e366004611acb565b610eac565b34801561053f57600080fd5b506101db61054e366004611e22565b60009081526005602052604090205490565b34801561056c57600080fd5b5061020e61057b366004611ae7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156105b557600080fd5b506102a56105c4366004611acb565b610ef3565b3480156105d557600080fd5b506102a56105e4366004611c0e565b610f3a565b60006001600160a01b0383166106595760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806106b057506001600160e01b031982166303a24d0760e21b145b806106cb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000818152600a602052604090208054606091906106ee906122aa565b80601f016020809104026020016040519081016040528092919081815260200182805461071a906122aa565b80156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b50505050509050919050565b61077c33610a23565b6107985760405162461bcd60e51b8152600401610650906120f2565b6107bf8383836040518060400160405280600381526020016203078360ec1b815250610f7f565b505050565b6107cd33610a23565b6107e95760405162461bcd60e51b8152600401610650906120f2565b6107f281610a23565b61083e5760405162461bcd60e51b815260206004820152601e60248201527f5461726765742061646472657373206973206e6f7420616e206f776e657200006044820152606401610650565b6001600160a01b0381166000908152600360205260408120805460ff191690555b60045481101561099c57816001600160a01b03166004828154811061089457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561098a57600480546108bf90600190612293565b815481106108dd57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600480546001600160a01b03909216918390811061091757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600480548061096457634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b03191690550190555050565b8061099481612312565b91505061085f565b5050565b6109a933610a23565b6109c55760405162461bcd60e51b8152600401610650906120f2565b60009182526005602052604090912055565b6001600160a01b0385163314806109f357506109f3853361057b565b610a0f5760405162461bcd60e51b815260040161065090612134565b610a1c8585858585611093565b5050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b60608151835114610aa65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610650565b6000835167ffffffffffffffff811115610ad057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610af9578160200160208202803683370190505b50905060005b8451811015610b9b57610b60858281518110610b2b57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610b5357634e487b7160e01b600052603260045260246000fd5b60200260200101516105e9565b828281518110610b8057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610b9481612312565b9050610aff565b509392505050565b610bac33610a23565b610bc85760405162461bcd60e51b8152600401610650906120f2565b60009182526007602052604090912055565b60045415801590610bf15750610bef33610a23565b155b15610c0e5760405162461bcd60e51b8152600401610650906120f2565b610c1781610a23565b15610c1f5750565b6001600160a01b03166000818152600360205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b610c8e33610a23565b610caa5760405162461bcd60e51b8152600401610650906120f2565b6000828152600a6020908152604090912082516107bf9284019061193a565b6009548290610ce1906001600160a01b0316856105e9565b1015610d1a5760405162461bcd60e51b815260206004820152600860248201526714d3d31117d3d55560c21b6044820152606401610650565b610d24838361128c565b60095460408051808201909152600381526203078360ec1b60208201526107bf916001600160a01b03169083908690869061137a565b610d6333610a23565b610d7f5760405162461bcd60e51b8152600401610650906120f2565b60009182526006602052604090912055565b60606004805480602002602001604051908101604052809291908181526020018280548015610de957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610dcb575b5050505050905090565b61099c3383836114a4565b610e0733610a23565b610e235760405162461bcd60e51b8152600401610650906120f2565b610e4b848484846040518060400160405280600381526020016203078360ec1b81525061137a565b50505050565b6009548290610e69906001600160a01b0316856105e9565b1015610ea25760405162461bcd60e51b815260206004820152600860248201526714d3d31117d3d55560c21b6044820152606401610650565b610d248383611585565b610eb533610a23565b610ed15760405162461bcd60e51b8152600401610650906120f2565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b610efc33610a23565b610f185760405162461bcd60e51b8152600401610650906120f2565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038516331480610f565750610f56853361057b565b610f725760405162461bcd60e51b815260040161065090612134565b610a1c858585858561137a565b6001600160a01b038416610fdf5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610650565b336000610feb856116ac565b90506000610ff8856116ac565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061102a90849061225c565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461108a83600089898989611705565b50505050505050565b81518351146110f55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610650565b6001600160a01b03841661111b5760405162461bcd60e51b815260040161065090612182565b3360005b845181101561121e57600085828151811061114a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061117657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156111c65760405162461bcd60e51b8152600401610650906121c7565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061120390849061225c565b925050819055505050508061121790612312565b905061111f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161126e929190612069565b60405180910390a4611284818787878787611870565b505050505050565b600082815260066020526040812054116112b85760405162461bcd60e51b815260040161065090612211565b6009546001600160a01b03166112e05760405162461bcd60e51b815260040161065090612211565b6000828152600660205260408120546112fa908390612274565b9050803410156113415760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f56414c554560701b6044820152606401610650565b6009546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610e4b573d6000803e3d6000fd5b6001600160a01b0384166113a05760405162461bcd60e51b815260040161065090612182565b3360006113ac856116ac565b905060006113b9856116ac565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156113fc5760405162461bcd60e51b8152600401610650906121c7565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061143990849061225c565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611499848a8a8a8a8a611705565b505050505050505050565b816001600160a01b0316836001600160a01b031614156115185760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610650565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600082815260076020526040812054116115b15760405162461bcd60e51b815260040161065090612211565b6009546001600160a01b03166115d95760405162461bcd60e51b815260040161065090612211565b6008546001600160a01b03166116015760405162461bcd60e51b815260040161065090612211565b60008281526007602052604081205461161a9083612274565b6008546009546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101849052929350169081906323b872dd90606401602060405180830381600087803b15801561167457600080fd5b505af1158015611688573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190611dce565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106116f457634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156112845760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906117499089908990889088908890600401611fc4565b602060405180830381600087803b15801561176357600080fd5b505af1925050508015611793575060408051601f3d908101601f1916820190925261179091810190611e06565b60015b6118405761179f612359565b806308c379a014156117d957506117b4612371565b806117bf57506117db565b8060405162461bcd60e51b81526004016106509190612097565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610650565b6001600160e01b0319811663f23a6e6160e01b1461108a5760405162461bcd60e51b8152600401610650906120aa565b6001600160a01b0384163b156112845760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906118b49089908990889088908890600401611f66565b602060405180830381600087803b1580156118ce57600080fd5b505af19250505080156118fe575060408051601f3d908101601f191682019092526118fb91810190611e06565b60015b61190a5761179f612359565b6001600160e01b0319811663bc197c8160e01b1461108a5760405162461bcd60e51b8152600401610650906120aa565b828054611946906122aa565b90600052602060002090601f01602090048101928261196857600085556119ae565b82601f1061198157805160ff19168380011785556119ae565b828001600101855582156119ae579182015b828111156119ae578251825591602001919060010190611993565b506119ba9291506119be565b5090565b5b808211156119ba57600081556001016119bf565b600067ffffffffffffffff8311156119ed576119ed612343565b604051611a04601f8501601f1916602001826122e5565b809150838152848484011115611a1957600080fd5b83836020830137600060208583010152509392505050565b600082601f830112611a41578081fd5b81356020611a4e82612238565b604051611a5b82826122e5565b8381528281019150858301600585901b87018401881015611a7a578586fd5b855b85811015611a9857813584529284019290840190600101611a7c565b5090979650505050505050565b600082601f830112611ab5578081fd5b611ac4838335602085016119d3565b9392505050565b600060208284031215611adc578081fd5b8135611ac4816123fb565b60008060408385031215611af9578081fd5b8235611b04816123fb565b91506020830135611b14816123fb565b809150509250929050565b600080600080600060a08688031215611b36578081fd5b8535611b41816123fb565b94506020860135611b51816123fb565b9350604086013567ffffffffffffffff80821115611b6d578283fd5b611b7989838a01611a31565b94506060880135915080821115611b8e578283fd5b611b9a89838a01611a31565b93506080880135915080821115611baf578283fd5b50611bbc88828901611aa5565b9150509295509295909350565b60008060008060808587031215611bde578384fd5b8435611be9816123fb565b93506020850135611bf9816123fb565b93969395505050506040820135916060013590565b600080600080600060a08688031215611c25578081fd5b8535611c30816123fb565b94506020860135611c40816123fb565b93506040860135925060608601359150608086013567ffffffffffffffff811115611c69578182fd5b611bbc88828901611aa5565b60008060408385031215611c87578182fd5b8235611c92816123fb565b91506020830135611b1481612413565b60008060408385031215611cb4578182fd5b8235611cbf816123fb565b946020939093013593505050565b600080600060608486031215611ce1578081fd5b8335611cec816123fb565b95602085013595506040909401359392505050565b60008060408385031215611d13578182fd5b823567ffffffffffffffff80821115611d2a578384fd5b818501915085601f830112611d3d578384fd5b81356020611d4a82612238565b604051611d5782826122e5565b8381528281019150858301600585901b870184018b1015611d76578889fd5b8896505b84871015611da1578035611d8d816123fb565b835260019690960195918301918301611d7a565b5096505086013592505080821115611db7578283fd5b50611dc485828601611a31565b9150509250929050565b600060208284031215611ddf578081fd5b8151611ac481612413565b600060208284031215611dfb578081fd5b8135611ac481612421565b600060208284031215611e17578081fd5b8151611ac481612421565b600060208284031215611e33578081fd5b5035919050565b60008060408385031215611e4c578182fd5b82359150602083013567ffffffffffffffff811115611e69578182fd5b8301601f81018513611e79578182fd5b611dc4858235602084016119d3565b60008060408385031215611e9a578182fd5b50508035926020909101359150565b600080600060608486031215611ebd578081fd5b83359250602084013591506040840135611ed6816123fb565b809150509250925092565b6000815180845260208085019450808401835b83811015611f1057815187529582019590820190600101611ef4565b509495945050505050565b60008151808452815b81811015611f4057602081850181015186830182015201611f24565b81811115611f515782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611f9290830186611ee1565b8281036060840152611fa48186611ee1565b90508281036080840152611fb88185611f1b565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611ffe90830184611f1b565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561204a5783516001600160a01b031683529284019291840191600101612025565b50909695505050505050565b602081526000611ac46020830184611ee1565b60408152600061207c6040830185611ee1565b828103602084015261208e8185611ee1565b95945050505050565b602081526000611ac46020830184611f1b565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600d908201526c14d1531317d11254d050931151609a1b604082015260600190565b600067ffffffffffffffff82111561225257612252612343565b5060051b60200190565b6000821982111561226f5761226f61232d565b500190565b600081600019048311821515161561228e5761228e61232d565b500290565b6000828210156122a5576122a561232d565b500390565b600181811c908216806122be57607f821691505b602082108114156122df57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561230b5761230b612343565b6040525050565b60006000198214156123265761232661232d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561236e57600481823e5160e01c5b90565b600060443d101561237f5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156123af57505050505090565b82850191508151818111156123c75750505050505090565b843d87010160208285010111156123e15750505050505090565b6123f0602082860101876122e5565b509095945050505050565b6001600160a01b038116811461241057600080fd5b50565b801515811461241057600080fd5b6001600160e01b03198116811461241057600080fdfea2646970667358221220ea9b8a71709d29c4da7d79b09116fd60cbcfbd5cb374394d794abcaa417bcdf064736f6c63430008040033";
    public static final String BINARY = "60806040523480156200001157600080fd5b506040805160208101909152600081526200002c816200003e565b50620000383362000057565b62000244565b80516200005390600290602084019062000161565b5050565b600454158015906200007957503360009081526003602052604090205460ff16155b15620000d65760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604482015261371760f11b606482015260840160405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff1615620000fb5750565b6001600160a01b03166000818152600360205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b8280546200016f9062000207565b90600052602060002090601f016020900481019282620001935760008555620001de565b82601f10620001ae57805160ff1916838001178555620001de565b82800160010185558215620001de579182015b82811115620001de578251825591602001919060010190620001c1565b50620001ec929150620001f0565b5090565b5b80821115620001ec5760008155600101620001f1565b600181811c908216806200021c57607f821691505b602082108114156200023e57634e487b7160e01b600052602260045260246000fd5b50919050565b61246d80620002546000396000f3fe6080604052600436106101b65760003560e01c806380dc439e116100ec578063d1eff8951161008a578063e1461f1211610064578063e1461f1214610533578063e985e9c514610560578063ec6be06e146105a9578063f242432a146105c957600080fd5b8063d1eff895146104d5578063d36223f1146104f3578063d879fb771461051357600080fd5b8063a22cb465116100c6578063a22cb46514610436578063adfadad314610456578063cf7c6de914610483578063d114c9dc146104b557600080fd5b806380dc439e146103e157806388d0f86a146103f4578063a0e67e2b1461041457600080fd5b80631abe7cb3116101595780634e1273f4116101335780634e1273f414610354578063578680be146103815780637065cb48146103a1578063782f08ae146103c157600080fd5b80631abe7cb3146102f45780632eb2c2d6146103145780632f54bf6e1461033457600080fd5b80630e89341c116101955780630e89341c14610265578063156e29f614610285578063173825d9146102a7578063177ed0f3146102c757600080fd5b8062fdd58e146101bb57806301ffc9a7146101ee5780630d8e6e2c1461021e575b600080fd5b3480156101c757600080fd5b506101db6101d6366004611ca2565b6105e9565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004611dea565b61067f565b60405190151581526020016101e5565b34801561022a57600080fd5b506040805180820190915260158152744f7a7a6965436f6e7472616374207620302e302e3160581b60208201525b6040516101e59190612097565b34801561027157600080fd5b50610258610280366004611e22565b6106d1565b34801561029157600080fd5b506102a56102a0366004611ccd565b610773565b005b3480156102b357600080fd5b506102a56102c2366004611acb565b6107c4565b3480156102d357600080fd5b506101db6102e2366004611e22565b60009081526007602052604090205490565b34801561030057600080fd5b506102a561030f366004611e88565b6109a0565b34801561032057600080fd5b506102a561032f366004611b1f565b6109d7565b34801561034057600080fd5b5061020e61034f366004611acb565b610a23565b34801561036057600080fd5b5061037461036f366004611d01565b610a41565b6040516101e59190612056565b34801561038d57600080fd5b506102a561039c366004611e88565b610ba3565b3480156103ad57600080fd5b506102a56103bc366004611acb565b610bda565b3480156103cd57600080fd5b506102a56103dc366004611e3a565b610c85565b6102a56103ef366004611ea9565b610cc9565b34801561040057600080fd5b506102a561040f366004611e88565b610d5a565b34801561042057600080fd5b50610429610d91565b6040516101e59190612009565b34801561044257600080fd5b506102a5610451366004611c75565b610df3565b34801561046257600080fd5b506101db610471366004611e22565b60009081526006602052604090205490565b34801561048f57600080fd5b506008546001600160a01b03165b6040516001600160a01b0390911681526020016101e5565b3480156104c157600080fd5b506102a56104d0366004611bc9565b610dfe565b3480156104e157600080fd5b506009546001600160a01b031661049d565b3480156104ff57600080fd5b506102a561050e366004611ea9565b610e51565b34801561051f57600080fd5b506102a561052e366004611acb565b610eac565b34801561053f57600080fd5b506101db61054e366004611e22565b60009081526005602052604090205490565b34801561056c57600080fd5b5061020e61057b366004611ae7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156105b557600080fd5b506102a56105c4366004611acb565b610ef3565b3480156105d557600080fd5b506102a56105e4366004611c0e565b610f3a565b60006001600160a01b0383166106595760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806106b057506001600160e01b031982166303a24d0760e21b145b806106cb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000818152600a602052604090208054606091906106ee906122aa565b80601f016020809104026020016040519081016040528092919081815260200182805461071a906122aa565b80156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b50505050509050919050565b61077c33610a23565b6107985760405162461bcd60e51b8152600401610650906120f2565b6107bf8383836040518060400160405280600381526020016203078360ec1b815250610f7f565b505050565b6107cd33610a23565b6107e95760405162461bcd60e51b8152600401610650906120f2565b6107f281610a23565b61083e5760405162461bcd60e51b815260206004820152601e60248201527f5461726765742061646472657373206973206e6f7420616e206f776e657200006044820152606401610650565b6001600160a01b0381166000908152600360205260408120805460ff191690555b60045481101561099c57816001600160a01b03166004828154811061089457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561098a57600480546108bf90600190612293565b815481106108dd57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600480546001600160a01b03909216918390811061091757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600480548061096457634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b03191690550190555050565b8061099481612312565b91505061085f565b5050565b6109a933610a23565b6109c55760405162461bcd60e51b8152600401610650906120f2565b60009182526005602052604090912055565b6001600160a01b0385163314806109f357506109f3853361057b565b610a0f5760405162461bcd60e51b815260040161065090612134565b610a1c8585858585611093565b5050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b60608151835114610aa65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610650565b6000835167ffffffffffffffff811115610ad057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610af9578160200160208202803683370190505b50905060005b8451811015610b9b57610b60858281518110610b2b57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610b5357634e487b7160e01b600052603260045260246000fd5b60200260200101516105e9565b828281518110610b8057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610b9481612312565b9050610aff565b509392505050565b610bac33610a23565b610bc85760405162461bcd60e51b8152600401610650906120f2565b60009182526007602052604090912055565b60045415801590610bf15750610bef33610a23565b155b15610c0e5760405162461bcd60e51b8152600401610650906120f2565b610c1781610a23565b15610c1f5750565b6001600160a01b03166000818152600360205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b610c8e33610a23565b610caa5760405162461bcd60e51b8152600401610650906120f2565b6000828152600a6020908152604090912082516107bf9284019061193a565b6009548290610ce1906001600160a01b0316856105e9565b1015610d1a5760405162461bcd60e51b815260206004820152600860248201526714d3d31117d3d55560c21b6044820152606401610650565b610d24838361128c565b60095460408051808201909152600381526203078360ec1b60208201526107bf916001600160a01b03169083908690869061137a565b610d6333610a23565b610d7f5760405162461bcd60e51b8152600401610650906120f2565b60009182526006602052604090912055565b60606004805480602002602001604051908101604052809291908181526020018280548015610de957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610dcb575b5050505050905090565b61099c3383836114a4565b610e0733610a23565b610e235760405162461bcd60e51b8152600401610650906120f2565b610e4b848484846040518060400160405280600381526020016203078360ec1b81525061137a565b50505050565b6009548290610e69906001600160a01b0316856105e9565b1015610ea25760405162461bcd60e51b815260206004820152600860248201526714d3d31117d3d55560c21b6044820152606401610650565b610d248383611585565b610eb533610a23565b610ed15760405162461bcd60e51b8152600401610650906120f2565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b610efc33610a23565b610f185760405162461bcd60e51b8152600401610650906120f2565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038516331480610f565750610f56853361057b565b610f725760405162461bcd60e51b815260040161065090612134565b610a1c858585858561137a565b6001600160a01b038416610fdf5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610650565b336000610feb856116ac565b90506000610ff8856116ac565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061102a90849061225c565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461108a83600089898989611705565b50505050505050565b81518351146110f55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610650565b6001600160a01b03841661111b5760405162461bcd60e51b815260040161065090612182565b3360005b845181101561121e57600085828151811061114a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061117657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156111c65760405162461bcd60e51b8152600401610650906121c7565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061120390849061225c565b925050819055505050508061121790612312565b905061111f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161126e929190612069565b60405180910390a4611284818787878787611870565b505050505050565b600082815260066020526040812054116112b85760405162461bcd60e51b815260040161065090612211565b6009546001600160a01b03166112e05760405162461bcd60e51b815260040161065090612211565b6000828152600660205260408120546112fa908390612274565b9050803410156113415760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f56414c554560701b6044820152606401610650565b6009546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610e4b573d6000803e3d6000fd5b6001600160a01b0384166113a05760405162461bcd60e51b815260040161065090612182565b3360006113ac856116ac565b905060006113b9856116ac565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156113fc5760405162461bcd60e51b8152600401610650906121c7565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061143990849061225c565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611499848a8a8a8a8a611705565b505050505050505050565b816001600160a01b0316836001600160a01b031614156115185760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610650565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600082815260076020526040812054116115b15760405162461bcd60e51b815260040161065090612211565b6009546001600160a01b03166115d95760405162461bcd60e51b815260040161065090612211565b6008546001600160a01b03166116015760405162461bcd60e51b815260040161065090612211565b60008281526007602052604081205461161a9083612274565b6008546009546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101849052929350169081906323b872dd90606401602060405180830381600087803b15801561167457600080fd5b505af1158015611688573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190611dce565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106116f457634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156112845760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906117499089908990889088908890600401611fc4565b602060405180830381600087803b15801561176357600080fd5b505af1925050508015611793575060408051601f3d908101601f1916820190925261179091810190611e06565b60015b6118405761179f612359565b806308c379a014156117d957506117b4612371565b806117bf57506117db565b8060405162461bcd60e51b81526004016106509190612097565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610650565b6001600160e01b0319811663f23a6e6160e01b1461108a5760405162461bcd60e51b8152600401610650906120aa565b6001600160a01b0384163b156112845760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906118b49089908990889088908890600401611f66565b602060405180830381600087803b1580156118ce57600080fd5b505af19250505080156118fe575060408051601f3d908101601f191682019092526118fb91810190611e06565b60015b61190a5761179f612359565b6001600160e01b0319811663bc197c8160e01b1461108a5760405162461bcd60e51b8152600401610650906120aa565b828054611946906122aa565b90600052602060002090601f01602090048101928261196857600085556119ae565b82601f1061198157805160ff19168380011785556119ae565b828001600101855582156119ae579182015b828111156119ae578251825591602001919060010190611993565b506119ba9291506119be565b5090565b5b808211156119ba57600081556001016119bf565b600067ffffffffffffffff8311156119ed576119ed612343565b604051611a04601f8501601f1916602001826122e5565b809150838152848484011115611a1957600080fd5b83836020830137600060208583010152509392505050565b600082601f830112611a41578081fd5b81356020611a4e82612238565b604051611a5b82826122e5565b8381528281019150858301600585901b87018401881015611a7a578586fd5b855b85811015611a9857813584529284019290840190600101611a7c565b5090979650505050505050565b600082601f830112611ab5578081fd5b611ac4838335602085016119d3565b9392505050565b600060208284031215611adc578081fd5b8135611ac4816123fb565b60008060408385031215611af9578081fd5b8235611b04816123fb565b91506020830135611b14816123fb565b809150509250929050565b600080600080600060a08688031215611b36578081fd5b8535611b41816123fb565b94506020860135611b51816123fb565b9350604086013567ffffffffffffffff80821115611b6d578283fd5b611b7989838a01611a31565b94506060880135915080821115611b8e578283fd5b611b9a89838a01611a31565b93506080880135915080821115611baf578283fd5b50611bbc88828901611aa5565b9150509295509295909350565b60008060008060808587031215611bde578384fd5b8435611be9816123fb565b93506020850135611bf9816123fb565b93969395505050506040820135916060013590565b600080600080600060a08688031215611c25578081fd5b8535611c30816123fb565b94506020860135611c40816123fb565b93506040860135925060608601359150608086013567ffffffffffffffff811115611c69578182fd5b611bbc88828901611aa5565b60008060408385031215611c87578182fd5b8235611c92816123fb565b91506020830135611b1481612413565b60008060408385031215611cb4578182fd5b8235611cbf816123fb565b946020939093013593505050565b600080600060608486031215611ce1578081fd5b8335611cec816123fb565b95602085013595506040909401359392505050565b60008060408385031215611d13578182fd5b823567ffffffffffffffff80821115611d2a578384fd5b818501915085601f830112611d3d578384fd5b81356020611d4a82612238565b604051611d5782826122e5565b8381528281019150858301600585901b870184018b1015611d76578889fd5b8896505b84871015611da1578035611d8d816123fb565b835260019690960195918301918301611d7a565b5096505086013592505080821115611db7578283fd5b50611dc485828601611a31565b9150509250929050565b600060208284031215611ddf578081fd5b8151611ac481612413565b600060208284031215611dfb578081fd5b8135611ac481612421565b600060208284031215611e17578081fd5b8151611ac481612421565b600060208284031215611e33578081fd5b5035919050565b60008060408385031215611e4c578182fd5b82359150602083013567ffffffffffffffff811115611e69578182fd5b8301601f81018513611e79578182fd5b611dc4858235602084016119d3565b60008060408385031215611e9a578182fd5b50508035926020909101359150565b600080600060608486031215611ebd578081fd5b83359250602084013591506040840135611ed6816123fb565b809150509250925092565b6000815180845260208085019450808401835b83811015611f1057815187529582019590820190600101611ef4565b509495945050505050565b60008151808452815b81811015611f4057602081850181015186830182015201611f24565b81811115611f515782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611f9290830186611ee1565b8281036060840152611fa48186611ee1565b90508281036080840152611fb88185611f1b565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611ffe90830184611f1b565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561204a5783516001600160a01b031683529284019291840191600101612025565b50909695505050505050565b602081526000611ac46020830184611ee1565b60408152600061207c6040830185611ee1565b828103602084015261208e8185611ee1565b95945050505050565b602081526000611ac46020830184611f1b565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600d908201526c14d1531317d11254d050931151609a1b604082015260600190565b600067ffffffffffffffff82111561225257612252612343565b5060051b60200190565b6000821982111561226f5761226f61232d565b500190565b600081600019048311821515161561228e5761228e61232d565b500290565b6000828210156122a5576122a561232d565b500390565b600181811c908216806122be57607f821691505b602082108114156122df57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561230b5761230b612343565b6040525050565b60006000198214156123265761232661232d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561236e57600481823e5160e01c5b90565b600060443d101561237f5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156123af57505050505090565b82850191508151818111156123c75750505050505090565b843d87010160208285010111156123e15750505050505090565b6123f0602082860101876122e5565b509095945050505050565b6001600160a01b038116811461241057600080fd5b50565b801515811461241057600080fd5b6001600160e01b03198116811461241057600080fdfea2646970667358221220ea9b8a71709d29c4da7d79b09116fd60cbcfbd5cb374394d794abcaa417bcdf064736f6c63430008040033";

    public static final String FUNC_ADDOWNER = "addOwner";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BUYWITHETHER = "buyWithEther";

    public static final String FUNC_BUYWITHTOKEN = "buyWithToken";

    public static final String FUNC_GETBENEFICIARYADDRESS = "getBeneficiaryAddress";

    public static final String FUNC_GETCURRENCYTOKENCONTRACT = "getCurrencyTokenContract";

    public static final String FUNC_GETOWNERS = "getOwners";

    public static final String FUNC_GETPRICEETHER = "getPriceEther";

    public static final String FUNC_GETPRICEFIAT = "getPriceFiat";

    public static final String FUNC_GETPRICETOKEN = "getPriceToken";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_OWNERTRANSFER = "ownerTransfer";

    public static final String FUNC_REMOVEOWNER = "removeOwner";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBENEFICIARYADDRESS = "setBeneficiaryAddress";

    public static final String FUNC_SETCURRENCYTOKENCONTRACTADDRESS = "setCurrencyTokenContractAddress";

    public static final String FUNC_SETPRICEETHER = "setPriceEther";

    public static final String FUNC_SETPRICEFIAT = "setPriceFiat";

    public static final String FUNC_SETPRICETOKEN = "setPriceToken";

    public static final String FUNC_SETURI = "setUri";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected OzzieContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OzzieContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OzzieContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OzzieContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public static List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addOwner(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDOWNER, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> buyWithEther(BigInteger tokenId, BigInteger requestedAmount, String recipient, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYWITHETHER, 
                Arrays.<Type>asList(new Uint256(tokenId),
                new Uint256(requestedAmount),
                new Address(160, recipient)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> buyWithToken(BigInteger tokenId, BigInteger requestedAmount, String recipient) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYWITHTOKEN, 
                Arrays.<Type>asList(new Uint256(tokenId),
                new Uint256(requestedAmount),
                new Address(160, recipient)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getBeneficiaryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBENEFICIARYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getCurrencyTokenContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCURRENCYTOKENCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getOwners() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getPriceEther(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICEETHER, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPriceFiat(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICEFIAT, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPriceToken(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICETOKEN, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getVersion() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, account),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner(String addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(new Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger id, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> ownerTransfer(String from, String to, BigInteger id, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNERTRANSFER, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeOwner(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEOWNER, 
                Arrays.<Type>asList(new Address(160, owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(id),
                new Uint256(amount),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBeneficiaryAddress(String addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBENEFICIARYADDRESS, 
                Arrays.<Type>asList(new Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCurrencyTokenContractAddress(String tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCURRENCYTOKENCONTRACTADDRESS, 
                Arrays.<Type>asList(new Address(160, tokenContract)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPriceEther(BigInteger id, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPRICEETHER, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPriceFiat(BigInteger id, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPRICEFIAT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPriceToken(BigInteger id, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPRICETOKEN, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUri(BigInteger id, String uri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI, 
                Arrays.<Type>asList(new Uint256(id),
                new Utf8String(uri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> uri(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static OzzieContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OzzieContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OzzieContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OzzieContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OzzieContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OzzieContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OzzieContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OzzieContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OzzieContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OzzieContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<OzzieContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OzzieContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OzzieContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OzzieContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OzzieContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OzzieContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }
}
